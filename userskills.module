<?php
// $Id: userskills.module
/**
* @file
* Custom functions for this site.
*/



function userskills_theme() {
  return array(
    'user_admin_account_skills' => array(
      'arguments' => array('form' => NULL),
      'file' => 'userskills_list.inc',
    ),
    
  );
}
function userskills_perm() {
	
		return array('access userskill','administer userskill');
	
}


  function userskills_menu() {
  $items = array();

  $items['userskills/%user/edit/skills'] = array(
    'title'             => 'User Skills',
    'page callback'     => 'drupal_get_form',
   	'page arguments' => array('userskills_form'),
  	'access callback' => TRUE,
  	'access arguments' => array('access userskill'),
  );
  
    $items['userskills'] = array(
    'title'             => 'Skills Management',
    'page callback'     => 'userskills_list',
  	'access callback' => TRUE,
  	'access arguments' => array('administer userskill'),
    'file' => 'userskills_list.inc',
  );

  return $items;
}
 
function userskills_taxonomy_drop_down(&$form_state){
    //$vid is the vocabulary ID
    $vid=1;

    $parents = db_query("SELECT td.name, td.tid FROM term_data td where td.tid IN(SELECT parent FROM term_hierarchy) and vid='".$vid."'");
  
    while ($term = db_fetch_object($parents)) {
         $childs = db_query("SELECT td.name, td.tid, th.parent FROM {term_data} td left join {term_hierarchy} th on th.tid=td.tid  WHERE th.parent=%d ORDER BY td.name", $term->tid);
         $hierarchy[$term->tid]['label'] = $term->name;
         while ($term1 = db_fetch_object($childs)) {
         	 $hierarchy[$term->tid]['children'][$term1->tid] = array('label' => $term1->name);
         }
       
    }
  
    $parents1 = db_query("SELECT td.name, td.tid FROM term_data td where td.tid IN(SELECT tid FROM term_hierarchy where parent=0) and vid='".$vid."'");
	 while ($term2= db_fetch_object($parents1)) {
	
	         if(!array_key_exists($term2->tid,$hierarchy))
	         {
	         $hierarchy[$term2->tid]['label'] = $term2->name;
	        
	         }
	         
	      
	    }
	    
        return $hierarchy;
	
}

function userskills_build_rating_drop_down($limit)
{
	for($i=1;$i<=$limit;$i++)
	{
		 $options[$i] = $i;
	}
	
	return $options;
}
  
  function userskills_form(&$form_state) {
   	global $user;
   	if(is_numeric(arg(1)))
   	{
   	$_SESSION['userId']=arg(1);	
   	}
   	
	
  	$ym=array('display_months'=>11,'display_year'=>30);
  	$ym_dropdown=generate_year_months($ym);
  	$hierarchy=userskills_taxonomy_drop_down($form_state);
  	$form_values='';
  	$form_count=2;
  	$rating=userskills_build_rating_drop_down(10);
  	

  	
	$form_values=get_user_value($_SESSION['userId']);
  	
  		if(!empty($form_values[0]))
  		{
  		if(!isset($form_state['values']))
  		{
	  		$form_state['values']=$form_values[0]['values'];
	  		$form_state['values']['new_name_count']=($form_values[1]-1);	
  		}
  		else
  		{
  		for($i=0;$i<$form_values[1];$i++)
  			{
  			$form_state['values']['id'.$i]=$form_values[0]['values']['id'.$i];
  			}
  		}
  		
  		}
  	
  
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t(' It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.'),
  );
  $form['skill1'] = array(
    '#type' => 'fieldset',
    '#title' => t('Skill'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  
  );
  
  
 $form['skill1']['first1'] = array(
    '#type' => 'hierarchical_select',
    '#title' => t('Select your skill'),
    '#size' => 1,
 	'#name'=>'first1',
    '#config' => array(
      'module' => 'hs_smallhierarchy',
      'params' => array(
        'hierarchy' => $hierarchy,
        'id' => 'my-hierarchy-about-windows',
        'separator' => '|',
      ),
      'save_lineage'    => 0,
      'enforce_deepest' => 0,
      'entity_count'    => 0,
      'resizable'       => 1,
      'level_labels' => array(
        'status' => 0,
        'labels' => array(
          0 => t('Main category'),
          1 => t('Subcategory'),
          2 => t('Third level category'),
        ),
      ),
      'dropbox' => array(
        'status'   => 0,
        'title'    => t('All selections'),
        'limit'    => 0,
        'reset_hs' => 1,
      ),
      'editability' => array(
        'status'           => 0,
        'item_types'       => array(),
        'allowed_levels'   => array(
          0 => 0,
          1 => 0,
          2 => 1,
        ),
        'allow_new_levels' => 0,
        'max_levels'       => 3,
      ),
      // These settings cannot be configured through the UI: they can only be
      // overridden through code.
      'animation_delay'    => 400,
      'exclusive_lineages' => array(),
      'render_flat_select' => 0,
    ),
    '#description' => 'Please select your skills.',
    '#default_value' => !empty($form_state['values']['first1']) ? $form_state['values']['first1'] : '',
  );
 
   /* $form['skill1']['first1'] = array (
    '#type'           => 'select',
    '#title' => t('Skill'),
    '#multiple'       => false,
    '#required'       => false,
    '#options'        => userskills_taxonomy_drop_down($form_state, $view, $initial_label),
    '#default_value' => !empty($form_state['values']['first1']) ? $form_state['values']['first1'] : '', // changed
  );*/
 /* $form['skill1']['first1'] = array(
    '#type' => 'textfield',
    '#title' => t('Skill'),
    '#default_value' => !empty($form_state['values']['first1']) ? $form_state['values']['first1'] : '', // changed
    '#description' => "Please enter your first name.",
   
  );*/
  $form['skill1']['year1'] = array(
    '#type' => 'select',
    '#title' => t('Experience(year)'),
  	'#multiple'       => false,
  	'#description' => "Please enter your experience. e.g: 1 year",
  	'#options'        =>$ym_dropdown['year'],
    '#default_value' => !empty($form_state['values']['year1']) ? $form_state['values']['year1'] : '', // added
  );
  $form['skill1']['month1'] = array(
    '#type' => 'select',
    '#title' => t('Experience(month)'),
  	'#multiple'       => false,
  	'#description' => "Please enter your experience. e.g: 2 months",
  	'#options'        =>$ym_dropdown['months'],
    '#default_value' => !empty($form_state['values']['month1']) ? $form_state['values']['month1'] : '', // added
  );
  $form['skill1']['rate1'] = array(
  
    '#type' => 'select',
    '#title' => t('Rating'),
  	'#multiple'       => false,
    '#required'       => false,
    '#options'        => $rating,
  	'#description' => "Please rate your skills.",
    '#default_value' => !empty($form_state['values']['rate1']) ? $form_state['values']['rate1'] : '', // added
  );
  $form['skill1']['id1'] = array(
    '#type' => 'hidden',
    '#default_value' => !empty($form_state['values']['id1']) ? $form_state['values']['id1'] : '', // added
  );
  if (isset($form_state['values']['new_name_count'])) {$form_count=$form_state['values']['new_name_count'];}
  if (isset($form_state['storage']['new_name']) || !empty($form_values[0])) {
  	
  	for($i=2;$i<=$form_count;$i++)
  	{
  		$form['skill'.$i] = array(
      	'#type' => 'fieldset',
      	'#title' => t('Skill #'.$i),
     	 '#collapsible' => TRUE,
      	'#collapsed' => FALSE,
   		 );
   		 /* $form['skill'.$i]['first'.$i] = array (
   		  '#title' => t('Skill'),
    '#type'           => 'select',
    '#multiple'       => false,
    '#required'       => false,
    '#options'        => userskills_taxonomy_drop_down($form_state, $view, $initial_label),
    '#default_value' => !empty($form_state['values']['first'.$i]) ? $form_state['values']['first'.$i] : '', // changed
  );*/
   		 $form['skill'.$i]['first'.$i] = array(
    '#type' => 'hierarchical_select',
    '#title' => t('Select your skill'),
    '#size' => 1,
    '#name'=>'first'.$i,
    '#config' => array(
      'module' => 'hs_smallhierarchy',
      'params' => array(
        'hierarchy' => $hierarchy,
        'id' => 'my-hierarchy-about-windows',
        'separator' => '|',
      ),
      'save_lineage'    => 0,
      'enforce_deepest' => 0,
      'entity_count'    => 0,
      'resizable'       => 1,
      'level_labels' => array(
        'status' => 0,
        'labels' => array(
          0 => t('Main category'),
          1 => t('Subcategory'),
          2 => t('Third level category'),
        ),
      ),
      'dropbox' => array(
        'status'   => 0,
        'title'    => t('All selections'),
        'limit'    => 0,
        'reset_hs' => 1,
      ),
      'editability' => array(
        'status'           => 0,
        'item_types'       => array(),
        'allowed_levels'   => array(
          0 => 0,
          1 => 0,
          2 => 1,
        ),
        'allow_new_levels' => 0,
        'max_levels'       => 3,
      ),
      // These settings cannot be configured through the UI: they can only be
      // overridden through code.
      'animation_delay'    => 400,
      'exclusive_lineages' => array(),
      'render_flat_select' => 0,
    ),
    '#description' => 'Please select your skills.',
    '#default_value' => !empty($form_state['values']['first'.$i]) ? $form_state['values']['first'.$i] : '',
  );
	    $form['skill'.$i]['year'.$i] = array(
	    	'#type' => 'select',
		    '#title' => t('Experience(year)'),
		  	'#multiple'       => false,
		  	'#description' => "Please enter your experience. e.g: 1 year",
		  	'#options'        =>$ym_dropdown['year'],
		    '#default_value' => !empty($form_state['values']['year'.$i]) ? $form_state['values']['year'.$i] : '', // added
	    );
	  
		  $form['skill'.$i]['month'.$i] = array(
		    '#type' => 'select',
		    '#title' => t('Experience(month)'),
		  	'#multiple'       => false,
		  	'#description' => "Please enter your experience. e.g: 2 months",
		  	'#options'        =>$ym_dropdown['months'],
		    '#default_value' => !empty($form_state['values']['month'.$i]) ? $form_state['values']['month'.$i] : '', // added
		  );
	     $form['skill'.$i]['rate'.$i] = array(
		    '#type' => 'select',
	      	'#title' => t('Rating'),
		    '#multiple'       => false,
		    '#required'       => false,
		    '#options'        => $rating,
		  	'#description' => "Please rate your skills.",
		    '#default_value' => !empty($form_state['values']['rate'.$i]) ? $form_state['values']['rate'.$i] : '', // added
		  );
		   $form['skill'.$i]['id'.$i] = array(
  
    '#type' => 'hidden',
    '#default_value' => !empty($form_state['values']['id'.$i]) ? $form_state['values']['id'.$i] : '', // added
  );
	    
  	}
   
    $form_count++;
  }
 
  

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
	
  );
  $form['clear'] = array(
    '#type' => 'submit',
    '#value' => 'Reset form',
    '#validate' => array('userskills_form_clear'),
  );

  	
    $form['new_name'] = array(
      '#type' => 'submit',
      '#value' => 'Add New >>',
      '#validate' => array('userskills_form_new_name'),
    );
    $form['new_name_count'] = array(
      '#type' => 'hidden',
      '#value' => $form_count,
    );
  return $form;
  }
  
  
  
  function userskills_form_new_name($form, &$form_state) {
    $form_state['storage']['new_name'] = TRUE;
    $form_state['rebuild'] = TRUE;
}

  function userskills_form_clear($form, &$form_state) {
    unset($form_state['values']);
    unset($form_state['storage']);
    $form_state['rebuild'] = TRUE;
}
      
function userskills_form_validate($form, &$form_state) {
 $form_count=$form_state['values']['new_name_count'];
  if (!empty($form_count)) {
  	
  	for($i=1;$i<$form_count;$i++)
  	{
  		$skill = $form_state['values']['first'.$i];
    	$expyear = $form_state['values']['year'.$i];
    	$expmonth = $form_state['values']['month'.$i];
    	$rating = $form_state['values']['rate'.$i];
	  	if (empty($skill)) {
	      form_set_error('first'.$i, t('Please enter your skill in Skill#'.$i.'.'));
	      
	    }
	    if (empty($expyear) && empty($expmonth)) {
	      form_set_error('year'.$i, t('Please enter your experience in Skill#'.$i.'.'));
	      form_set_error('month'.$i);
	    }
  		if (empty($rating)) {
	      form_set_error('rate'.$i, t('Please rating your skills in Skill#'.$i.'.'));
	    }
  	}
  	//$form_state['values']['new_name_count']=($form_count-1);
  }
  
} 
function userskills_form_submit($form, &$form_state) {
	global $user;
	
	$form_count=$form_state['values']['new_name_count'];
	for($i=1;$i<$form_count;$i++)
  	{
  		$rtid=$form_state['values']['first'.$i];
  		$skill = explode('|',$rtid);
  		if(!empty($skill[1]))
  		{
  			$skill=$skill[1];
  		}
  		else
  		{
  			$skill=$skill[0];
  		}
    	$expyear = $form_state['values']['year'.$i];
    	$expmonth = $form_state['values']['month'.$i];
    	$rating = $form_state['values']['rate'.$i];
    	$id=$form_state['values']['id'.$i];
    	if(empty($id))
    	{
    		db_query("INSERT INTO {users_skills} set uid = %d,rtid='%s',tid = %d,rating='%s',year='%d',month='%d'",arg(1),$rtid,$skill,$rating,$expyear,$expmonth);	
    	}
    	else
    	{
    		db_query("update {users_skills} set uid = %d,rtid='%s',tid = %d,rating='%s',year='%d',month='%d' where id='$id'",arg(1),$rtid,$skill,$rating,$expyear,$expmonth);	
    	}
    	//echo "INSERT INTO {users_skills} set uid = %d, tid = %d, skills = '%s',rating='%s',exp='%s'",$user->uid, '1',$skill,$rating,$exp;die();
	  	
  	}
  	drupal_set_message(t('Data saved successfully'));
	userskills_form_clear($form, &$form_state);
}

function get_user_value($userId)
{
	$results=array();
	if(!empty($userId))
	{
		    $query = "select * from {users_skills} where uid='$userId'";
		    $result = db_query($query);
		    $counts = 1;
		    while ($data = db_fetch_object($result)) {
		   	 $results['values']['id'.$counts] = $data->id;
		     $results['values']['first'.$counts] = $data->rtid;
		     $results['values']['year'.$counts] = $data->year;
		     $results['values']['month'.$counts] = $data->month;
		     $results['values']['rate'.$counts] = $data->rating;
		     $counts++;
		    }
	}
	return array($results,$counts);
}      

function generate_year_months($ym)
{
	$year[]='--select year--';
	for($i=1;$i<=$ym['display_year'];$i++)
	{
		$year[$i]=$i;
	}
	
	$month[]='--select month--';
	for($j=1;$j<=$ym['display_months'];$j++)
	{
		$month[$j]=$j;
	}
	
	return array('year'=>$year,'months'=>$month);
}